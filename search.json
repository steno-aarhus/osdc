[{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://steno-aarhus.github.io/osdc/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://steno-aarhus.github.io/osdc/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://steno-aarhus.github.io/osdc/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://steno-aarhus.github.io/osdc/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement lwjohnst@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://steno-aarhus.github.io/osdc/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://steno-aarhus.github.io/osdc/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://steno-aarhus.github.io/osdc/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://steno-aarhus.github.io/osdc/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://steno-aarhus.github.io/osdc/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://steno-aarhus.github.io/osdc/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://steno-aarhus.github.io/osdc/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022-2023 Steno Diabetes Center Aarhus Aarhus University Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://steno-aarhus.github.io/osdc/PULL_REQUEST_TEMPLATE.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"NA","text":"changes PURPOSE, REASON. Closes #","code":""},{"path":"https://steno-aarhus.github.io/osdc/PULL_REQUEST_TEMPLATE.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"NA","text":"Ran just run-docs added, Markdown formatted","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/algorithm.html","id":"general-description","dir":"Articles","previous_headings":"","what":"General description","title":"Algorithm","text":"complete description classifier found Anders Aasted Isaksen’s PhD Thesis well validation paper (1). description algorithm brief concise version documents. overall output algorithm first classify diabetes, classify check individuals might type 1 diabetes, otherwise classify type 2 diabetes. initial diabetes classification defined second occurrence listed inclusion events. Wherever possible, available data event used, except purchases glucose-lowering drugs, since data obstetric diagnoses necessary censor glucose-lowering drug purchases complete 1997 onwards. Inclusion criteria : HbA1c measurements ≥48 mmol/mol. Hospital diagnoses diabetes. Diabetes-specific services received podiatrist. Purchase glucose-lowering drugs. Exclusions : Samples taken pregnancies, potential gestational diabetes mellitus. Brand drugs weight loss, e.g. Saxenda. Purchases pregnancies, potential treatment gestational diabetes mellitus. Metformin women age 40, treatment polycystic ovary syndrome.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/algorithm.html","id":"classifying-type-1-diabetes","dir":"Articles","previous_headings":"General description","what":"Classifying type 1 diabetes","title":"Algorithm","text":"Diabetes type classified either T1D T2D based patterns purchases insulin drugs (including analogues) hospital primary diagnoses T1D T2D. Classification T1D requires individual fulfill either following criteria: Must purchased insulin drugs never type glucose-lowering drugs, least one diagnosis T1D Must majority T1D diagnoses endocrinological departments (medical departments, absence contacts endocrinological departments), purchase insulin within 180 days onset diabetes, insulin contributing least two thirds defined daily doses glucose-lowering drugs purchased. populations generated fixed index date (cross-sectional studies associated dissertation), individuals classified T1D cases must purchased insulin drugs last year prior index date.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/algorithm.html","id":"classifying-type-2-diabetes","dir":"Articles","previous_headings":"General description","what":"Classifying type 2 diabetes","title":"Algorithm","text":"Individuals classified T1D cases classified T2D cases.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/algorithm.html","id":"detailed-and-technical-description","dir":"Articles","previous_headings":"","what":"Detailed and technical description","title":"Algorithm","text":"technical, exact implementation description. logical conditions exact variables registers used results classification diabetes status types. shown form tables register, well ","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/articles/changes.html","id":"version-1-1","dir":"Articles","previous_headings":"Specific changes since the original validation (version from the paper)","what":"Version 1.1","title":"Changes to algorithm","text":"don’t use purchases semaglutid, dapagliflozin empagliflozin, neither inclusion events classification diabetes type (due increasing use treatment non-diabetes). longer use diabetes type reclassification based insulin purchases previous year. logic defining pregnancy index dates simplified use diagnoses pregnancy endings (longer uses data maternal care visits). De-duplicates subsequent HbA1c samples taken date (originally, sampling time available lab data, samples taken time de-duplicated)","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/changes.html","id":"version-1-2","dir":"Articles","previous_headings":"Specific changes since the original validation (version from the paper)","what":"Version 1.2","title":"Changes to algorithm","text":"longer uses GLP1-RAs inclusion type-specification.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/changes.html","id":"validity","dir":"Articles","previous_headings":"","what":"Validity","title":"Changes to algorithm","text":"Algorithm validity across versions. Reports PPV (positive predictive value) sensitivity typical cases cases atypical age onset T1D (age 40) T2D (age 40), respectively.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/changes.html","id":"on-pre-2019-data-as-in-the-paper","dir":"Articles","previous_headings":"Validity","what":"On pre-2019 data (as in the paper)","title":"Changes to algorithm","text":"Overall age onset-stratified (paper table 1 & 2): Bootstrapped metrics (paper S3):","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/changes.html","id":"potential-future-changes","dir":"Articles","previous_headings":"","what":"Potential future changes","title":"Changes to algorithm","text":"Add support using medical birth register define pregnancies censor gestational diabetes (GDM). allow censoring glucose-lowering drug (GLD) purchases way back 1995 (rather 1997 onward, obstetric codes limited ), enable extension window valid dates diagnosis 1996 onward. Limit historic scope primary diagnoses used evaluate majority diabetes-specific diagnoses type classification (e.g. evaluate majority among last five type-specific diabetes diagnoses).","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"data-required-from-registers","dir":"Articles","previous_headings":"","what":"Data required from registers","title":"Data sources","text":"following list variables required specific registers order package classify diabetes status:","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"expected-data-structure","dir":"Articles","previous_headings":"","what":"Expected data structure","title":"Data sources","text":"section describes data sources listed table expected look like input OSDC algorithm. try mimic much possible raw data looks like within Denmark Statistics. since registers often stored per year basis, don’t expect year variable data . ’ve processed data year variable, likely need split-apply-combine approach using osdc package. internally convert variable names lower case, present lower case, case may vary data sources (even years data source) real data. small note National Patient Register. contains several tables types data. algorithm uses hospital diagnosis data contained four registers, pair two related registers used (LPR2) (LPR3) 2019. LPR2 LPR3 equivalents lpr_adm kontakter lpr_diag diagnoser. variables equivalents well, except c_spec LPR2 equivalent hovedspeciale_ans LPR3, specialty values hovedspeciale_ans coded literal specialty names different padded integer codes c_spec contains. Statistics Denmark, tables provided mix separate files calendar year prior 2019 (LPR2 format) single file containing data 2019 onward (LPR3 format). two tables can joined either recnum variable (LPR2 data) dw_ek_kontakt variable (LPR3 data).","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"bef-cpr-registerets-befolkningstabel","dir":"Articles","previous_headings":"Expected data structure","what":"bef: CPR-registerets befolkningstabel","title":"Data sources","text":"Variables descriptions within bef register. want see data look like, see simulate_registers().","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"lmdb-laegemiddelstatistikregisteret","dir":"Articles","previous_headings":"Expected data structure","what":"lmdb: Laegemiddelstatistikregisteret","title":"Data sources","text":"Variables descriptions within lmdb register. want see data look like, see simulate_registers().","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"lpr_adm-landspatientregisterets-administrationstabel-lpr2","dir":"Articles","previous_headings":"Expected data structure","what":"lpr_adm: Landspatientregisterets administrationstabel (LPR2)","title":"Data sources","text":"Variables descriptions within lpr_adm register. want see data look like, see simulate_registers().","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"lpr_diag-landspatientregisterets-diagnosetabel-lpr2","dir":"Articles","previous_headings":"Expected data structure","what":"lpr_diag: Landspatientregisterets diagnosetabel (LPR2)","title":"Data sources","text":"Variables descriptions within lpr_diag register. want see data look like, see simulate_registers().","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"kontakter-landspatientregisterets-kontakttabel-lpr3","dir":"Articles","previous_headings":"Expected data structure","what":"kontakter: Landspatientregisterets kontakttabel (LPR3)","title":"Data sources","text":"Variables descriptions within kontakter register. want see data look like, see simulate_registers().","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"diagnoser-landspatientregisterets-diagnosetabel-lpr3","dir":"Articles","previous_headings":"Expected data structure","what":"diagnoser: Landspatientregisterets diagnosetabel (LPR3)","title":"Data sources","text":"Variables descriptions within diagnoser register. want see data look like, see simulate_registers().","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"sysi-sygesikringsregisteret","dir":"Articles","previous_headings":"Expected data structure","what":"sysi: Sygesikringsregisteret","title":"Data sources","text":"Variables descriptions within sysi register. want see data look like, see simulate_registers().","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"sssy-sygesikringsregisteret","dir":"Articles","previous_headings":"Expected data structure","what":"sssy: Sygesikringsregisteret","title":"Data sources","text":"Variables descriptions within sssy register. want see data look like, see simulate_registers().","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"lab_forsker-laboratoriedatabasens-forskertabel","dir":"Articles","previous_headings":"Expected data structure","what":"lab_forsker: Laboratoriedatabasens forskertabel","title":"Data sources","text":"Variables descriptions within lab_forsker register. want see data look like, see simulate_registers().","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/data-sources.html","id":"getting-access-to-data","dir":"Articles","previous_headings":"","what":"Getting access to data","title":"Data sources","text":"data available Statistics Denmark Danish Health Data Authority. Researchers must affiliated approved research institute Denmark fees apply. Information gain access data can found https://www.dst.dk/en/TilSalg/Forskningsservice.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/design.html","id":"principles","dir":"Articles","previous_headings":"","what":"Principles","title":"Design","text":"guiding principles package: Functionality agnostic data format possible (e.g. can used SQL Arrow connections, data.table format, data.frame). Functions consistent inputs outputs (e.g. inputs outputs , regardless specific conditions). Functions predictable outputs based inputs (e.g. input data frame, output data frame). Functions consistent naming based action. Functions limited additional arguments. Casing input variables (upper lower case) agnostic, internal variables lower case, output variables lower case.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/design.html","id":"use-cases","dir":"Articles","previous_headings":"","what":"Use cases","title":"Design","text":"make assumptions package used, based experiences expectations use cases: Entirely used within Denmark Statistics Danish Health Authority’s servers, since data kept. Used researchers within affiliated Danish research institutions. Used specifically within Danish register-based context. set “narratives” “personas” associated needs package aims fulfill: “… want determine registers variables request Denmark Statistics Danish Health Data Authority, certain able classify diabetes status individuals registers.” “… want easily simply create dataset contains data diabetes status population, can begin conducting research involves persons diabetes without tinker coding correct algorithm classify .” “… want informed early clear way whether data fits required data type values, can fix correct issues without extensive debugging code /data.”","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/design.html","id":"core-functionality","dir":"Articles","previous_headings":"","what":"Core functionality","title":"Design","text":"list functionality aim osdc package Classify individuals type 1 type 2 diabetes status create data frame information date onset diabetes. Provide helper functions check process individual registers variables required enter classifier. Provide list required variables registers order calculate diabetes status. Provide validation helper functions check variables match expected algorithm. Provide common easily accessible standard determining diabetes status within context research using Danish registers.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/design.html","id":"function-conventions","dir":"Articles","previous_headings":"","what":"Function conventions","title":"Design","text":"Effectively developing main user-exposed internal functions requires following conventions design patterns building functions. conventions describe : naming patterns functions arguments, argument input requirements, output data structure. conventions ideals , used guidelines help development understanding code. hard rules.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/design.html","id":"naming","dir":"Articles","previous_headings":"Function conventions","what":"Naming","title":"Design","text":"First word action verb, later words objects conditions. Exclusion criteria prefixed exclude_. Inclusion criteria prefixed include_. Helpers get extract condition (e.g., “pregnancy” “date visit”) prefixed get_. Helpers drop keep specific condition prefixed drop_ keep_ (e.g., “first visit date maternal care pregnancy 40 weeks”). types helpers likely contained get_ functions. Helpers join output functions prefixed join_. Functions prepare process register data prefixed prepare_.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/design.html","id":"input","dir":"Articles","previous_headings":"Function conventions","what":"Input","title":"Design","text":"arguments possible, core required arguments possible (ideally one two). One input register database time. exclude_ functions can take register first argument take output include_ function. functions take data.frame type object input. input object doesn’t need strictly data.frame long acts like data.frame. instance, data.table, tibble, duckdb object. first argument always take data frame type object. second argument output data frame object another function (usually include_).","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/design.html","id":"output","dir":"Articles","previous_headings":"Function conventions","what":"Output","title":"Design","text":"functions output type object input object (data.frame type object). instance, input data.table object, output also data.table.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/design.html","id":"interface","dir":"Articles","previous_headings":"","what":"Interface","title":"Design","text":"osdc package contains one main function classifies individuals either type 1 type 2 diabetes using Danish registers: classify_diabetes(). function classifies diabetes (type 1 2) based Danish registers described vignette(\"design\") vignette(\"data-sources\"). data sources used input function. specific inclusion exclusion details described vignette(\"algorithm\").","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/design.html","id":"input-1","dir":"Articles","previous_headings":"Interface","what":"Input","title":"Design","text":"one argument classify_diabetes() required register, argument : [1] “- bef: register called ‘CPR-registerets befolkningstabel’ Danish.” [2] “- lmdb: register called ‘Laegemiddelstatistikregisteret’ Danish.” [3] “- lpr_adm: register called ‘Landspatientregisterets administrationstabel (LPR2)’ Danish.” [4] “- lpr_diag: register called ‘Landspatientregisterets diagnosetabel (LPR2)’ Danish.” [5] “- kontakter: register called ‘Landspatientregisterets kontakttabel (LPR3)’ Danish.” [6] “- diagnoser: register called ‘Landspatientregisterets diagnosetabel (LPR3)’ Danish.” [7] “- sysi: register called ‘Sygesikringsregisteret’ Danish.” [8] “- sssy: register called ‘Sygesikringsregisteret’ Danish.” [9] “- lab_forsker: register called ‘Laboratoriedatabasens forskertabel’ Danish.”","code":"registers() |>   purrr::imap_chr(~ glue::glue(\"- `{.y}`: The register that is called '{.x$name}' in Danish.\")) |>   unname()"},{"path":"https://steno-aarhus.github.io/osdc/articles/design.html","id":"output-1","dir":"Articles","previous_headings":"Interface","what":"Output","title":"Design","text":"output data.frame type object includes four columns: pnr: pseudonymised social security number individuals diabetes population (one row per individual). stable_inclusion_date: stable inclusion date (.e., raw date mutated individuals included time-period data coverage sufficient make incident cases reliable)1 raw_inclusion_date: raw inclusion date (.e., date second inclusion event described Extracting diabetes population section ) diabetes_type classified diabetes type example, see . Example rows data.frame output osdc package. individuals 0000000001 0000000004 classified diabetes (T1D T2D, respectively). 0000000001 classified type 1 diabetes (T1D) inclusion date 2020-01-01. Since date within time-period sufficient data coverage, column stable_inclusion_date populated date raw_inclusion_date. individual second row, 0000000004 classified type 2 diabetes T2D inclusion date 1995-19-04. Since 1995 within time-period insufficient data coverage, stable_inclusion_date NULL. However, raw_inclusion_date still contains inclusion date individual.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"function-flow","dir":"Articles","previous_headings":"","what":"Function flow","title":"Internal function flow","text":"results functionality flow classifying diabetes status seen . flow can divided two sections: extracting diabetes population classifying diabetes type detail following sections.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"population-extraction","dir":"Articles","previous_headings":"","what":"Population extraction","title":"Internal function flow","text":"following sections, describe functions used extract diabetes population Danish registers. functions divided inclusion exclusion events, final diagnosis date calculated based events.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"inclusion-events","dir":"Articles","previous_headings":"","what":"Inclusion events","title":"Internal function flow","text":"prepare_lpr2(): See ?prepare_lpr2 information.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"join_lpr3","dir":"Articles","previous_headings":"Inclusion events","what":"join_lpr3()","title":"Internal function flow","text":"","code":"#' Process and join the two LPR3 registers to extract diabetes diagnoses data. #' #' The output is used as inputs to `include_diabetes_diagnoses()` and to #' `get_pregnancy_dates()` (see exclusion events). #' #' @param diagnoser The LPR3 register containing diabetes diagnoses. #' @param kontakter The LPR3 register containing hospital contacts/admissions. #' #' @return The same type as the input data, default as a [tibble::tibble()], #'  with the following columns: #' #'  -   `pnr`: The personal identification variable. #'  -   `date`: The date of all the recorded diagnosis (renamed from `d_inddto`). #'  -   `is_primary_diagnosis`: Whether the diagnosis was a primary #'      diagnosis. #'  -   `has_t1d`: Whether the diagnosis was T1D-specific #'  -   `has_t2d`: Whether the diagnosis was T2D-specific. #'  -   `has_pregnancy_event`: Whether the person has an event related to pregnancy like giving birth or having a miscarriage at the given date. #'  -   `is_endocrinology_department`: Whether the diagnosis was made made by an #'      endocrinology (TRUE) or other medical (FALSE) department. #' #' @keywords internal #' @inherit algorithm seealso #' #' @examples #' sim_data <- simulate_registers(c(\"diagnoser\", \"kontakter\"), 100) #' join_lpr3( #'   diagnoser = sim_data$diagnoser, #'   kontakter = sim_data$kontakter #' ) join_lpr3 <- function(diagnoser, kontakter) {   # Filter using the algorithm for LPR3   diagnoser |>     dplyr::full_join(kontakter, by = dplyr::join_by(.data$dw_ek_kontakt)) |>     # Ensure the values are always lower case.     dplyr::mutate(hovedspeciale_ans = tolower(hovedspeciale_ans)) |>     dplyr::select(       \"pnr\" = \"cpr\",       \"date\" = \"dato_start\"       # is_primary_diagnosis =       # has_t1d =       # has_t2d =       # has_pregnancy_event =       # is_endocrinology_department =     ) }"},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"include_diabetes_diagnosis","dir":"Articles","previous_headings":"Inclusion events","what":"include_diabetes_diagnosis()","title":"Internal function flow","text":"","code":"#' Include diabetes diagnoses from LPR2 and LPR3. #' #' Uses the hospital contacts from LPR2 and LPR3 to include all dates of diabetes #' diagnoses to use for inclusion, as well as additional information needed to classify diabetes #' type. Diabetes diagnoses from both ICD-8 and ICD-10 are included. #' #' The output is used as inputs to `join_inclusions()`. #' This output is passed to the `join_inclusions()` function, where the #' `dates` variable is used for the final step of the inclusion process. #' The variables of counts of diabetes type-specific primary diagnoses (the #' four columns prefixed `n_` above) are carried over for the subsequent #' classification of diabetes type, initially as inputs to the #' `get_t1d_primary_diagnosis()` and `get_majority_of_t1d_diagnoses()` #' functions. #' #' @param lpr2 The output from `prepare_lpr2()`. #' @param lpr3 The output from `join_lpr3()`. #' #' @return The same type as the input data, default as a [tibble::tibble()], #'  with the following columns and up to two rows per individual: #' #'  -   `pnr`: The personal identification variable. #'  -   `dates`: The dates of the first and second hospital diabetes diagnosis. #'  -   `n_t1d_endocrinology`: The number of type 1 diabetes-specific primary #'      diagnosis codes from endocrinology departments. #'  -   `n_t2d_endocrinology`: The number of type 2 diabetes-specific primary #'      diagnosis codes from endocrinology departments. #'  -   `n_t1d_medical`: The number of type 1 diabetes-specific primary #'      diagnosis codes from medical departments. #'  -  `n_t2d_medical`: The number of type 2 diabetes-specific primary #'      diagnosis codes from medical departments. #'  -  `has_lpr_diabetes_diagnosis`: A logical variable that acts as a helper #'      indicator for use in later functions. #' #' @keywords internal #' @inherit algorithm seealso #' #' @examples #' register_data <- simulate_registers(c(\"lpr_diag\", \"lpr_adm\", \"diagnoser\", \"kontakter\")) #' include_diabetes_diagnosis( #'   lpr2 = prepare_lpr2(register_data$lpr_diag, register_data$lpr_adm), #'   lpr3 = join_lpr3(register_data$diagnoser, register_data$kontakter) #' ) include_diabetes_diagnosis <- function(lpr2, lpr3) {   # Combine and process the two inputs   lpr2 |>     dplyr::full_join(lpr3, by = dplyr::join_by(.data$pnr)) |>     dplyr::select(       \"pnr\",       \"dates\" = \"date\"       # n_t1d_endocrinology =       # n_t2d_endocrinology =       # n_t1d_medical =       # n_t2d_medical =     ) |>     dplyr::mutate(has_lpr_diabetes_diagnosis = TRUE) }"},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"include_podiatrist_services","dir":"Articles","previous_headings":"Inclusion events","what":"include_podiatrist_services()","title":"Internal function flow","text":"See ?include_podiatrist_services information.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"include_hba1c","dir":"Articles","previous_headings":"Inclusion events","what":"include_hba1c()","title":"Internal function flow","text":"See ?include_hba1c information.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"include_gld_purchases","dir":"Articles","previous_headings":"Inclusion events","what":"include_gld_purchases()","title":"Internal function flow","text":"See ?include_gld_purchases information.","code":""},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"exclude_potential_pcos","dir":"Articles","previous_headings":"Exclusion events","what":"exclude_potential_pcos()","title":"Internal function flow","text":"See ?exclude_potential_pcos information.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"exclude_pregnancy","dir":"Articles","previous_headings":"Exclusion events","what":"exclude_pregnancy()","title":"Internal function flow","text":"","code":"#' Exclude any pregnancy events that could be gestational diabetes. #' #' #' The function `exclude_pregnancy()` takes the combined outputs from #' `prepare_lpr2()`, `join_lpr3()`, `include_hba1c()`, and #' `exclude_potential_pcos()` and uses diagnoses from LPR2 or LPR3 to #' exclude both elevated HbA1c tests and GLD purchases during pregnancy, as #' these may be due to gestational diabetes, rather than type 1 or type 2 #' diabetes. The aim is to identify pregnancies based on diagnosis codes #' specific to pregnancy-ending events (e.g. live births or miscarriages), #' and then use the dates of these events to remove inclusion events in the #' preceding months that may be related to gestational diabetes (e.g. #' elevated HbA1c tests or purchases of glucose-lowering drugs during #' pregnancy). #' #' After these exclusion functions have been applied, the output serves as #' inputs to two sets of functions: #' #' 1.  The censored HbA1c and GLD data are passed to the #'     `join_inclusions()` function for the final step of the inclusion #'     process. #' 2.  the censored GLD data is passed to the #'     `get_only_insulin_purchases()`, #'     `get_insulin_purchases_within_180_days()`, and #'     `get_insulin_is_two_thirds_of_gld_doses()` helper functions for the #'     classification of diabetes type. #' #' @param excluded_pcos Output from `exclude_potential_pcos()`. #' @param pregnancy_dates Output from `get_pregnancy_dates()`. #' @param included_hba1c Output from `include_hba1c()`. #' #' @returns The same type as the input data, default as a [tibble::tibble()]. #'    Has the same output data as the input `excluded_potential_pcos()`, except #'    for a helper logical variable `no_pregnancy` that is used in later functions. #' @keywords internal #' @inherit algorithm seealso #' #' @examples #' register_data <- simulate_registers(c( #'   \"lmdb\", \"bef\", \"lpr_diag\", \"lpr_adm\", #'   \"diagnoser\", \"kontakter\", \"lab_forsker\" #' )) #' lpr2 <- prepare_lpr2(register_data$lpr_diag, register_data$lpr_adm) #' lpr3 <- join_lpr3(register_data$diagnoser, register_data$kontakter) #' lmdb |> #'   include_gld_purchases() |> #'   exclude_potential_pcos(register_data$bef) |> #'   exclude_pregnancy( #'     get_pregnancy_dates(lpr2, lpr3), #'     include_hba1c(register_data$lab_forsker) #'   ) exclude_pregnancy <- function(excluded_pcos, pregnancy_dates, included_hba1c) {   # Filter using the algorithm for pregnancy   excluded_pcos |>     # Exclude those who are not pregnant.     dplyr::full_join(pregnancy_dates, by = dplyr::join_by(.data$pnr)) |>     dplyr::full_join(included_hba1c, by = dplyr::join_by(.data$pnr)) |>     # Filtering here...     dplyr::mutate(no_pregnancy = TRUE) } #' Simple function to get only the pregnancy event dates. #' #' @param lpr2 Output from `prepare_lpr2()`. #' @param lpr3 Output from `join_lpr3()`. #' #' @returns The same type as the input data, default as a [tibble::tibble()]. #' @keywords internal #' @inherit algorithm seealso #' #' @examples #' register_data <- simulate_registers(c(\"lpr_diag\", \"lpr_adm\", \"diagnoser\", \"kontakter\"), 100) #' lpr2 <- prepare_lpr2(register_data$lpr_diag, register_data$lpr_adm) #' lpr3 <- join_lpr3(register_data$diagnoser, register_data$kontakter) #' get_pregnancy_dates(lpr2, lpr3) get_pregnancy_dates <- function(lpr2, lpr3) {   # Filter using the algorithm for pregnancy   lpr2 |>     dplyr::full_join(lpr3, by = dplyr::join_by(pnr)) |>     dplyr::filter(has_pregnancy_events) |>     dplyr::select(       pnr,       pregnancy_event_date = date     ) }"},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"join_inclusions","dir":"Articles","previous_headings":"Joining inclusions and exclusions","what":"join_inclusions()","title":"Internal function flow","text":"","code":"#' Join included events. #' #' This function joins the outputs from all the inclusion and exclusion #' functions, by `pnr` and `dates`. Input datasets: #' #' - `included_diabetes_diagnoses`: Dates are the first and second hospital diabetes diagnosis. #' - `included_podiatrist_services`: Dates are the first and second diabetes-specific podiatrist record. #' - `hba1c_censored_pregnancy`: Dates are the first and second elevated HbA1c test results (after censoring potential gestational diabetes). #' - `gld_censored_pcos_pregnancy`: Dates are the first and second purchase of a glucose-lowering drug (after censoring potential polycystic ovary syndrome and gestational diabetes). #' #' @param included_diabetes_diagnoses Output from [include_diabetes_diagnoses()]. #' @param included_podiatrist_services Output from [include_podiatrist_services()]. #' @param hba1c_censored_pregnancy Output from [exclude_pregnancy()] when given `hba1c` data. #' @param gld_censored_pcos_pregnancy Output from [exclude_pregnancy()] when given `gld_censored_pcos` data. #' #' @returns The same type as the input data, default as a [tibble::tibble()], #'   with the joined columns from the output of [include_diabetes_diagnoses()], #'   [include_podiatrist_services()] and [exclude_pregnancy()]. There will be  #'   1-8 rows per `pnr`. #' @keyword internal #' @inherit algorithm seealso join_inclusions <- function(     included_diabetes_diagnoses,     included_podiatrist_services,     hba1c_censored_pregnancy,     gld_censored_pcos_pregnancy     ) {   # Combine the outputs from the inclusion and exclusion events   purrr::reduce(     list(       included_diabetes_diagnoses,       included_podiatrist_services,       excluded_pregnancy     ),     # This joins *only* by pnr and dates. If datasets have the same column     # names, they will be renamed to differentiate them.     # TODO: We may need to ensure that no two datasets have the same columns.     \\(x, y) dplyr::full_join(x, y, by = dplyr::join_by(.data$pnr, .data$dates))   ) }"},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"create-inclusion-dates","dir":"Articles","previous_headings":"Joining inclusions and exclusions","what":"Create inclusion dates","title":"Internal function flow","text":"","code":"#' Create the final diagnosis date based on all the inclusion event types. #' #' The function `create_inclusion_dates()` takes the output from `join_inclusions()` #' and defines the final diagnosis date based on all the inclusion event types. #' Keeps only those with 2 or more recorded inclusion events, regardless of the #' type of these events (e.g. two elevated HbA1c tests will lead to inclusion as #' well as one elevated HbA1c test followed by a purchase of glucose-lowering #' drugs). #' #' @param inclusions Output from [join_inclusions()]. #' @param stable_inclusion_start_date The date from when the inclusion events #'    from all sources are considered more 'stable' (e.g. time after the change #'    in how medication drugs are labeled and how doctors actually regularly #'    input the new change into the database). #' #' @returns The same type as the input data, default as a [tibble::tibble()], #'   along with the `purchase_date`, `atc`, `contained_doses` columns from #'   `exclude_pregnancy()`, and the `n_t1d_endocrinology`, #'   `n_t2d_endocrinology`, `n_t1d_medical`, and `n_t2d_medical` columns from #'   `include_diabetes_diagnoses()`. It also creates two new columns: #' #'   - `raw_inclusion_date`: Date of inclusion, which is the second #'      earliest recorded event. #'   - `stable_inclusion_date`: Date of inclusion of individuals included #'      at least one year after the incorporation of inclusions based on #'      glucose-lowering drug data (1998 onwards when using National Patient #'      Register data for censoring of gestational diabetes). Limits the #'      included cohort to only individuals with a valid date of inclusion #'      (and thereby valid age at inclusion & duration of diabetes). #' #' @keywords internal #' @inherit algorithm seealso create_inclusion_dates <- function(inclusions, stable_inclusion_start_date = \"1998-01-01\") {   inclusions |>     # TODO: May need to consider more efficient ways than using group by.     dplyr::group_by(.data$pnr) |>     # Drop earliest date so only those with two or more events are included.     dplyr::filter(.data$dates != min(.data$dates, na.rm = TRUE)) |>     dplyr::mutate(       # Earliest date in the rows for each individual.       raw_inclusion_date = min(.data$dates, na.rm = TRUE),       stable_inclusion_date = dplyr::if_else(         .data$raw_inclusion_date < lubridate::as_date(stable_inclusion_start_date),         NA,         .data$raw_inclusion_date       )     ) |>     dplyr::ungroup() |>     dplyr::select(       \"pnr\",       \"raw_inclusion_date\",       \"stable_inclusion_date\",        # From `exclude_pregnancy()` via the GLD purchases       # TODO: this might need to be renamed in a previous step, rather than here.       \"purchase_date\" = \"date\",       \"atc\",       \"contained_doses\",        # From `include_diabetes_diagnoses()`       \"n_t1d_endocrinology\",       \"n_t2d_endocrinology\",       \"n_t1d_medical\",       \"n_t2d_medical\"     ) }"},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"classifying-the-diabetes-type","dir":"Articles","previous_headings":"Joining inclusions and exclusions","what":"Classifying the diabetes type","title":"Internal function flow","text":"next step OSDC algorithm classifies individuals extracted diabetes population either T1D T2D. described vignette(\"design\"), individuals classified T1D cases classified T2D cases. diabetes type classification incorporates evaluation time diagnosis/inclusion first subsequent purchase insulin, get_diabetes_type() function take date diagnosis purchases GLD drugs (censoring) inputs. addition, information diabetes type-specific primary diagnoses hospitals also requirement. Thus, function takes following inputs get_inclusion_date(), exclude_pregnancy(), include_diabetes_diagnoses(): pnr raw_inclusion_date stable_inclusion_date pnr: identifier variable date: dates purchases GLD. atc: type drug contained_doses: defined daily doses drug contained purchase pnr: identifier variable n_t1d_endocrinology: number type 1 diabetes-specific primary diagnosis codes endocrinological departments n_t2d_endocrinology: number type 2 diabetes-specific primary diagnosis codes endocrinological departments n_t1d_medical: number type 1 diabetes-specific primary diagnosis codes medical departments n_t2d_medical: number type 2 diabetes-specific primary diagnosis codes medical departments pnr number, several helper functions applied inputs extract additional information censored GLD data diagnoses use classification diabetes type. return single value (TRUE, otherwise FALSE) individual: atc only_insulin_purchases = TRUE purchases atc starting “A10A” present date & atc raw_inclusion_date Outputs: TRUE purchases atc starting “A10A” date 0 180 days higher raw_inclusion_date contained_doses & atc Outputs: TRUE sum contained_doses rows atc starting “A10A” (except “A10AE5”) least twice sum contained_doses rows atc starting “A10B” “A10AE5” n_t1d_endocrinology & n_t1d_medical Outputs: TRUE combined sum inputs 1 . n_t1d_endocrinology, n_t2d_endocrinology Outputs: type_diagnoses_from_endocrinology = TRUE combined sum inputs 1 n_t1d_endocrinology, n_t2d_endocrinology, n_t1d_medical & n_t2d_medical type_diagnoses_from_endocrinology Outputs: TRUE type_diagnoses_from_endocrinology == TRUE n_t1d_endocrinology n_t2d_endocrinology. Also TRUE type_diagnoses_from_endocrinology = FALSE n_t1d_medical n_t2d_medical get_diabetes_type() evaluates outputs helper functions define diabetes type individual. Diabetes type classified “T1D” : only_insulin_purchases == TRUE & any_t1d_primary_diagnoses == TRUE only_insulin_purchases == FALSE & any_t1d_primary_diagnoses == TRUE & type_diagnosis_majority == TRUE & insulin_is_two_thirds_of_gld_doses == TRUE & insulin_purchases_within_180_days == TRUE get_diabetes_type() returns data.frame one row per pnr number four columns: pnr, stable_inclusion_date, raw_inclusion_date & diabetes_type. final product OSDC algorithm. See vignette(\"design\") detail two inclusion dates intended use-cases.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"type-1-classification","dir":"Articles","previous_headings":"Joining inclusions and exclusions > Classifying the diabetes type","what":"Type 1 classification","title":"Internal function flow","text":"details classification type 1 diabetes described vignette(\"design\"). classify whether individual T1D, OSDC algorithm includes following criteria: get_t1d_primary_diagnosis(), relies hospital diagnoses extracted lpr_diag (LPR2) diagnoser (LPR3) previous steps. get_only_insulin_purchases() relies GLD purchases Lægemiddeldatabasen get patients GLD purchases insulin . get_majority_of_t1d_diagnoses() (compared T2D diagnoses) relies primary hospital diagnoses LPR. get_insulin_purchase_within_180_days() relies diagnosis LPR GLD purchases Lægemiddeldatabasen. get_insulin_is_two_thirds_of_gld_doses relies GLD purchases Lægemiddeldatabasen. Note following hierarchy first function : First, function checks whether individual primary diagnoses endocrinological specialty. ’s case given person, check whether majority T1D primary diagnoses based data endocrinological specialty. ’s case, check based primary diagnoses medical specialties.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/function-flow.html","id":"type-2-classification","dir":"Articles","previous_headings":"Joining inclusions and exclusions > Classifying the diabetes type","what":"Type 2 classification","title":"Internal function flow","text":"described vignette(\"design\"), individuals classified type 1 cases classified type 2 cases.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/osdc.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Getting started","text":"First, let’s load package, well dplyr. core package depends list variables within different registers needed order classify diabetes status individual. can found list:","code":"library(dplyr) library(osdc) registers() #> $bef #> $bef$name #> [1] \"CPR-registerets befolkningstabel\" #>  #> $bef$start_year #> [1] 1968 #>  #> $bef$end_year #> [1] NA #>  #> $bef$variables #> # A tibble: 3 × 4 #>   name      danish_description         english_description             data_type #>   <chr>     <chr>                      <chr>                           <chr>     #> 1 pnr       Pseudonymiseret cpr-nummer Pseudonymised social security … character #> 2 koen      Koen                       Gender/sex                      integer   #> 3 foed_dato Foedselsdato               Date of birth                   Date      #>  #>  #> $lmdb #> $lmdb$name #> [1] \"Laegemiddelstatistikregisteret\" #>  #> $lmdb$start_year #> [1] 1995 #>  #> $lmdb$end_year #> [1] NA #>  #> $lmdb$variables #> # A tibble: 6 × 4 #>   name   danish_description                 english_description        data_type #>   <chr>  <chr>                              <chr>                      <list>    #> 1 pnr    Pseudonymiseret cpr-nummer         Pseudonymised social secu… <chr [1]> #> 2 eksd   Ekspeditionsdato                   Date of purchase           <chr [2]> #> 3 atc    ATC-kode (fuldt specificeret)      ATC code (fully specified) <chr [1]> #> 4 volume Antal standarddoser (DDD) i pakken Number of daily standard … <chr [1]> #> 5 apk    Antal pakker koebt                 Number of packages purcha… <chr [1]> #> 6 indo   Indikationskode for recept         Indication code            <chr [1]> #>  #>  #> $lpr_adm #> $lpr_adm$name #> [1] \"Landspatientregisterets administrationstabel (LPR2)\" #>  #> $lpr_adm$start_year #> [1] 1977 #>  #> $lpr_adm$end_year #> [1] 2018 #>  #> $lpr_adm$variables #> # A tibble: 4 × 4 #>   name     danish_description                    english_description   data_type #>   <chr>    <chr>                                 <chr>                 <list>    #> 1 pnr      Pseudonymiseret cpr-nummer            Pseudonymised social… <chr [1]> #> 2 recnum   Kontakt id-nummer                     Record id number      <chr [1]> #> 3 d_inddto Indlaeggelsesdato (start paa kontakt) Date of admission or… <chr [2]> #> 4 c_spec   Afdelings specialekode                Specialty code of de… <chr [1]> #>  #>  #> $lpr_diag #> $lpr_diag$name #> [1] \"Landspatientregisterets diagnosetabel (LPR2)\" #>  #> $lpr_diag$start_year #> [1] 1977 #>  #> $lpr_diag$end_year #> [1] 2018 #>  #> $lpr_diag$variables #> # A tibble: 3 × 4 #>   name       danish_description english_description data_type #>   <chr>      <chr>              <chr>               <chr>     #> 1 recnum     Kontakt id-nummer  Record id number    character #> 2 c_diag     Diagnosekode       Diagnosis code      character #> 3 c_diagtype Diagnosetype       Diagnosis type      character #>  #>  #> $kontakter #> $kontakter$name #> [1] \"Landspatientregisterets kontakttabel (LPR3)\" #>  #> $kontakter$start_year #> [1] 2019 #>  #> $kontakter$end_year #> [1] NA #>  #> $kontakter$variables #> # A tibble: 4 × 4 #>   name              danish_description             english_description data_type #>   <chr>             <chr>                          <chr>               <list>    #> 1 cpr               Pseudonymiseret cpr-nummer     Pseudonymised soci… <chr [1]> #> 2 dw_ek_kontakt     Kontakt id-nummer              Record id number    <chr [1]> #> 3 dato_start        Indlaeggelsesdato (start paa … Date of admission … <chr [2]> #> 4 hovedspeciale_ans Afdelings speciale             Specialty of depar… <chr [1]> #>  #>  #> $diagnoser #> $diagnoser$name #> [1] \"Landspatientregisterets diagnosetabel (LPR3)\" #>  #> $diagnoser$start_year #> [1] 2019 #>  #> $diagnoser$end_year #> [1] NA #>  #> $diagnoser$variables #> # A tibble: 4 × 4 #>   name              danish_description             english_description data_type #>   <chr>             <chr>                          <chr>               <chr>     #> 1 dw_ek_kontakt     Kontakt id-nummer              Record id number    character #> 2 diagnosekode      Diagnosekode                   Diagnosis code      character #> 3 diagnosetype      Diagnosetype                   Diagnosis type      character #> 4 senere_afkraeftet Blev diagnosen senere afkraef… Was the diagnosis … character #>  #>  #> $sysi #> $sysi$name #> [1] \"Sygesikringsregisteret\" #>  #> $sysi$start_year #> [1] 1990 #>  #> $sysi$end_year #> [1] 2005 #>  #> $sysi$variables #> # A tibble: 4 × 4 #>   name     danish_description                    english_description   data_type #>   <chr>    <chr>                                 <chr>                 <chr>     #> 1 pnr      Pseudonymiseret cpr-nummer            Pseudonymised social… character #> 2 barnmak  Blev ydelse ydet til patientens barn? Was the service prov… integer   #> 3 speciale Ydelsens honoreringskode              Billing code of the … character #> 4 honuge   Aar og uge for ydelse                 Year and week of ser… character #>  #>  #> $sssy #> $sssy$name #> [1] \"Sygesikringsregisteret\" #>  #> $sssy$start_year #> [1] 2006 #>  #> $sssy$end_year #> [1] NA #>  #> $sssy$variables #> # A tibble: 4 × 4 #>   name     danish_description                    english_description   data_type #>   <chr>    <chr>                                 <chr>                 <chr>     #> 1 pnr      Pseudonymiseret cpr-nummer            Pseudonymised social… character #> 2 barnmak  Blev ydelse ydet til patientens barn? Was the service prov… integer   #> 3 speciale Ydelsens honoreringskode              Billing code of the … character #> 4 honuge   Aar og uge for ydelse                 Year and week of ser… character #>  #>  #> $lab_forsker #> $lab_forsker$name #> [1] \"Laboratoriedatabasens forskertabel\" #>  #> $lab_forsker$start_year #> [1] 2011 #>  #> $lab_forsker$end_year #> [1] NA #>  #> $lab_forsker$variables #> # A tibble: 4 × 4 #>   name         danish_description           english_description        data_type #>   <chr>        <chr>                        <chr>                      <list>    #> 1 patient_cpr  Pseudonymiseret cpr-nummer   Pseudonymised social secu… <chr [1]> #> 2 samplingdate Dato for proevetagning       Date of sampling           <chr [2]> #> 3 analysiscode Analysens NPU-kode           NPU code of analysis       <chr [1]> #> 4 value        Numerisk resultat af analyse Numerical result of analy… <chr [1]>"},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/articles/rationale.html","id":"danish-register-data-infrastructure","dir":"Articles","previous_headings":"Identifying type 1 and 2 diabetes cases in Danish healthcare registers","what":"Danish register data infrastructure","title":"Rationale","text":"Many individual-level data (e.g. civil registration, public healthcare contacts, drug prescriptions) automatically collected residents Denmark stored nationwide Danish registers Statistics Denmark Danish Health Data Authority. agencies legally allowed give access register data research purposes, provides (authorized) researchers set common, extensive data sources use studies. researcher associated approved Danish research institute (mainly Danish universities) can apply access, fees conditions apply. Register data generally accessed processed approved researchers remote servers operated Statistics Denmark Danish Health Data Authority. raw data used researchers, coupled common virtual working environment, potential enable reproducible research. means data processing workflow transferable reusable research projects underlying code designed reproducibility mind code shared (“open-sourced”) (2). reproducibility research relates transparent reporting methods enable others reproduce analyses experiments, also applies diabetes classification program, - reproducible - reused researcher access necessary register data dynamically identify study population individuals diabetes research needs (3).","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/rationale.html","id":"current-danish-register-based-diabetes-classifiers","dir":"Articles","previous_headings":"Identifying type 1 and 2 diabetes cases in Danish healthcare registers","what":"Current Danish register-based diabetes classifiers","title":"Rationale","text":"Denmark, National Diabetes Register, established 2006, first resource readily available researchers use identifying diabetes cases register data (4) . However, discontinued 2012. next resource Register Selected Chronic Diseases (RSCD), launched 2014. currently publicly available resource identify diabetes cases Danish register data (application Danish Health Data Authority).","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/rationale.html","id":"challenges-in-current-classifiers","dir":"Articles","previous_headings":"","what":"Challenges in current classifiers","title":"Rationale","text":"General-purpose registers administrative databases often provide basis diabetes epidemiology, rarely contain validated diabetes-specific data, may introduce bias studies using data. important accurate tool identify individuals diabetes registers, findings may differ various diabetes definitions (5,6). Considerable efforts made towards establishing tool diabetes research several countries, including Denmark (7–9). general population, classification algorithms (classifiers) need identify type 1 diabetes well type 2 diabetes, also account events might lead inclusion non-cases, use glucose-lowering drugs treatment conditions. Currently, type-specific diabetes classifier validated general population, leaves register-based studies area vulnerable biases. Denmark, limitation (flaw) RSCD publicly validated source code behind algorithm made publicly available. Notably, algorithm lacks inclusion based elevated HbA1c levels (10). Likewise, National Diabetes Register, since discontinued 2012, validation study question validity called future registers adopt inclusion based elevated HbA1c levels (11). Since launch RSCD, nationwide laboratory data HbA1c testing become available Danish register ecosystem (12), data yet incorporated available diabetes classifiers.","code":""},{"path":"https://steno-aarhus.github.io/osdc/articles/rationale.html","id":"diabetes-classification-algorithms","dir":"Articles","previous_headings":"","what":"Diabetes classification algorithms","title":"Rationale","text":"currently available register-based diabetes classifiers yet incorporate emerging register data routine HbA1c testing. Wishing take advantage data, developed Open Source Diabetes Classifier (OSDC). Detailed discussion advantages disadvantages ’s design found Anders Aasted Isaksen’s thesis, chapter discussing methods. aimed developing algorithm : Stimulate discussion within Denmark openness ease use existing classifiers diabetes registers, need official process updating contributing existing data sources diabetes status. algorithm package may end used official institutions, can serve starting point improve current state diabetes classification Denmark inspiration might designed. Provide open-source, code-based algorithm R package classify type 1 type 2 diabetes based data Danish registers. implemented R package researchers can easily build database individuals diabetes quickly waiting official source implemented.","code":""},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luke William Johnston. Author, maintainer. Signe Kirk Brødbæk. Author. Anders Aasted Isaksen. Author. Steno Diabetes Center Aarhus. Copyright holder. Aarhus University. Copyright holder.","code":""},{"path":"https://steno-aarhus.github.io/osdc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnston LW, Brødbæk SK, Isaksen AA (2025). osdc: Open Source Diabetes Classifier (OSDC) Danish Registers. R package version 0.0.1.9000, https://github.com/steno-aarhus/osdc.","code":"@Manual{,   title = {osdc: Open Source Diabetes Classifier (OSDC) for Danish Registers},   author = {Luke William Johnston and Signe Kirk Brødbæk and Anders Aasted Isaksen},   year = {2025},   note = {R package version 0.0.1.9000},   url = {https://github.com/steno-aarhus/osdc}, }"},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Open Source Diabetes Classifier (OSDC) for Danish Registers","text":"goal osdc (Open Source Diabetes Classifier) expose algorithm classifying diabetes within Danish registers can accessible R package. algorithm developed Steno Diabetes Center Aarhus flexible convenient use, validated terms accuracy. algorithms used throughout Denmark Danish register research, usually textual descriptions , rather code-based descriptions (e.g. Register Selected Chronic Diseases). project, aim make easier explicit classify type 1 type 2 diabetes within Danish register context. original implementation algorithm validated peer-reviewed publication , expect make tweaks algorithm time. changes transparent osdc repository.","code":""},{"path":"https://steno-aarhus.github.io/osdc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Open Source Diabetes Classifier (OSDC) for Danish Registers","text":"can install development version osdc GitHub : install dependencies development , like simulating data running full test suite, use:","code":"# install.packages(\"pak\") pak::pak(\"steno-aarhus/osdc\") pak::pak(\"steno-aarhus/osdc\", dependencies = \"all\")"},{"path":"https://steno-aarhus.github.io/osdc/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Open Source Diabetes Classifier (OSDC) for Danish Registers","text":"developing package, use justfile simplify development workflow make explicit. justfile contains commands runs formatters, various checks like CRAN checks spelling checks, tests, builds files website (doesn’t publish ). use ensure consistent development workflow forget run important checks committing changes. example, make pull request contribute changes, run following command Terminal project directory:","code":"just run-all"},{"path":"https://steno-aarhus.github.io/osdc/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Open Source Diabetes Classifier (OSDC) for Danish Registers","text":"Please note osdc project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/algorithm.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of the algorithmic logic for each criteria underlying osdc. — algorithm","title":"A list of the algorithmic logic for each criteria underlying osdc. — algorithm","text":"nested list contains logic details algorithm specific inclusion exclusion criteria.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/algorithm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of the algorithmic logic for each criteria underlying osdc. — algorithm","text":"","code":"algorithm()"},{"path":"https://steno-aarhus.github.io/osdc/reference/algorithm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list of the algorithmic logic for each criteria underlying osdc. — algorithm","text":"list nested lists named elements: register Optional. register used criteria. name inclusion exclusion criteria name. title title use displaying algorithmic logic tables. logic logic criteria. comments additional comments criteria.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/algorithm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A list of the algorithmic logic for each criteria underlying osdc. — algorithm","text":"nested list algorithmic logic criteria. Contains fields register, title, logic, comments.","code":""},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/reference/algorithm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A list of the algorithmic logic for each criteria underlying osdc. — algorithm","text":"","code":"algorithm()$hba1c #> NULL algorithm()$gld$logic #> NULL"},{"path":"https://steno-aarhus.github.io/osdc/reference/classify_diabetes.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify diabetes status using Danish registers. — classify_diabetes","title":"Classify diabetes status using Danish registers. — classify_diabetes","text":"Classify diabetes status using Danish registers.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/classify_diabetes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify diabetes status using Danish registers. — classify_diabetes","text":"","code":"classify_diabetes(   kontakter,   diagnoser,   lpr_diag,   lpr_adm,   sysi,   sssy,   lab_forsker,   bef,   lmdb )"},{"path":"https://steno-aarhus.github.io/osdc/reference/classify_diabetes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify diabetes status using Danish registers. — classify_diabetes","text":"kontakter contacts register lpr3 diagnoser diagnoses register lpr3 lpr_diag diagnoses register lpr2 lpr_adm admissions register lpr2 sysi SYSI register sssy SSSY register lab_forsker lab forsker register bef BEF register lmdb LMDB register","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/classify_diabetes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify diabetes status using Danish registers. — classify_diabetes","text":"object type input data, tibble::tibble() type object.","code":""},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/reference/classify_diabetes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify diabetes status using Danish registers. — classify_diabetes","text":"","code":"if (FALSE) { # \\dontrun{ register_data <- simulate_registers(   c(     \"kontakter\",     \"diagnoser\",     \"lpr_diag\",     \"lpr_adm\",     \"sysi\",     \"sssy\",     \"lab_forsker\",     \"bef\",     \"lmdb\"   ),   n = 10000 ) classify_diabetes(   kontakter = register_data$kontakter,   diagnoser = register_data$diagnoser,   lpr_diag = register_data$lpr_diag,   lpr_adm = register_data$lpr_adm,   sysi = register_data$sysi,   sssy = register_data$sssy,   lab_forsker = register_data$lab_forsker,   bef = register_data$bef,   lmdb = register_data$lmdb ) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/classify_t1d.html","id":null,"dir":"Reference","previous_headings":"","what":"After inclusion and exclusion, classify those with type 1 diabetes. — classify_t1d","title":"After inclusion and exclusion, classify those with type 1 diabetes. — classify_t1d","text":"inclusion exclusion, classify type 1 diabetes.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/classify_t1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"After inclusion and exclusion, classify those with type 1 diabetes. — classify_t1d","text":"","code":"classify_t1d(data)"},{"path":"https://steno-aarhus.github.io/osdc/reference/classify_t1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"After inclusion and exclusion, classify those with type 1 diabetes. — classify_t1d","text":"data Joined data output inclusion exclusion steps.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/classify_t1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"After inclusion and exclusion, classify those with type 1 diabetes. — classify_t1d","text":"object type input data, tibble::tibble() type object.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/column_names_to_lower.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert column names to lower case. — column_names_to_lower","title":"Convert column names to lower case. — column_names_to_lower","text":"Convert column names lower case.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/column_names_to_lower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert column names to lower case. — column_names_to_lower","text":"","code":"column_names_to_lower(data)"},{"path":"https://steno-aarhus.github.io/osdc/reference/column_names_to_lower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert column names to lower case. — column_names_to_lower","text":"data data frame type object.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/column_names_to_lower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert column names to lower case. — column_names_to_lower","text":"object type given.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/column_names_to_lower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert column names to lower case. — column_names_to_lower","text":"","code":"if (FALSE) { # \\dontrun{ tibble::tibble(A = 1:3, B = 4:6) |>   osdc:::column_names_to_lower() } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_atc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector with random ATC codes — create_fake_atc","title":"Create a vector with random ATC codes — create_fake_atc","text":"Anatomical Therapeutic Chemical (ATC) codes unique medicine codes based organ system works works.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_atc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector with random ATC codes — create_fake_atc","text":"","code":"create_fake_atc(n)"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_atc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector with random ATC codes — create_fake_atc","text":"n number random ATC codes generate.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_atc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector with random ATC codes — create_fake_atc","text":"character vector ATC codes.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_atc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector with random ATC codes — create_fake_atc","text":"","code":"if (FALSE) { # \\dontrun{ create_fake_atc(10) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Create fake dates — create_fake_date","title":"Create fake dates — create_fake_date","text":"Create fake dates","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create fake dates — create_fake_date","text":"","code":"create_fake_date(n, from = \"1977-01-01\", to = lubridate::today())"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create fake dates — create_fake_date","text":"n number dates generate. date determining first date interval sample . date determining last date interval sample .","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create fake dates — create_fake_date","text":"vector dates.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create fake dates — create_fake_date","text":"","code":"if (FALSE) { # \\dontrun{ create_fake_date(20) create_fake_date(20, \"1995-04-19\", \"2024-04-19\") } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_hovedspeciale_ans.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector of random department specialties — create_fake_hovedspeciale_ans","title":"Create a vector of random department specialties — create_fake_hovedspeciale_ans","text":"Create vector random department specialties","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_hovedspeciale_ans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector of random department specialties — create_fake_hovedspeciale_ans","text":"","code":"create_fake_hovedspeciale_ans(n)"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_hovedspeciale_ans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector of random department specialties — create_fake_hovedspeciale_ans","text":"n number department specialties create.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_hovedspeciale_ans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector of random department specialties — create_fake_hovedspeciale_ans","text":"character vector.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_hovedspeciale_ans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector of random department specialties — create_fake_hovedspeciale_ans","text":"","code":"if (FALSE) { # \\dontrun{ create_fake_hovedspeciale_ans(1000) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector with random ICD-8 or -10 diagnoses — create_fake_icd","title":"Create a vector with random ICD-8 or -10 diagnoses — create_fake_icd","text":"Create vector random ICD-8 -10 diagnoses","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector with random ICD-8 or -10 diagnoses — create_fake_icd","text":"","code":"create_fake_icd(n, date = NULL)"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector with random ICD-8 or -10 diagnoses — create_fake_icd","text":"n number ICD-8 -10 diagnoses generate. date date determining whether diagnoses ICD-8 ICD-10. null, random date sampled determine ICD revision diagnosis . Danish registers, ICD-10 used 1994.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector with random ICD-8 or -10 diagnoses — create_fake_icd","text":"character vector ICD-10 diagnoses.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector with random ICD-8 or -10 diagnoses — create_fake_icd","text":"","code":"if (FALSE) { # \\dontrun{ create_fake_icd(10) create_fake_icd(5, \"1995-04-19\") } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd10.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector of random ICD-10 diagnoses — create_fake_icd10","title":"Create a vector of random ICD-10 diagnoses — create_fake_icd10","text":"ICD-10 10th revision International Classification Diseases.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector of random ICD-10 diagnoses — create_fake_icd10","text":"","code":"create_fake_icd10(n)"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd10.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Create a vector of random ICD-10 diagnoses — create_fake_icd10","text":"stored CSV downloaded Danish Health Data Authority's website medinfo.dk.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd10.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector of random ICD-10 diagnoses — create_fake_icd10","text":"n integer determining many diagnoses create.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd10.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector of random ICD-10 diagnoses — create_fake_icd10","text":"character vector ICD-10 diagnoses.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd10.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector of random ICD-10 diagnoses — create_fake_icd10","text":"","code":"if (FALSE) { # \\dontrun{ create_fake_icd10(3) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd8.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector of random ICD-8 diagnoses — create_fake_icd8","title":"Create a vector of random ICD-8 diagnoses — create_fake_icd8","text":"ICD-8 8th revision International Classification Diseases.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector of random ICD-8 diagnoses — create_fake_icd8","text":"","code":"create_fake_icd8(n)"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector of random ICD-8 diagnoses — create_fake_icd8","text":"n number ICD-8 diagnoses generate.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd8.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector of random ICD-8 diagnoses — create_fake_icd8","text":"character vector ICD-8 diagnoses.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_icd8.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector of random ICD-8 diagnoses — create_fake_icd8","text":"","code":"if (FALSE) { # \\dontrun{ create_fake_icd8(1) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_npu.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector of random NPU codes — create_fake_npu","title":"Create a vector of random NPU codes — create_fake_npu","text":"Nomenclature Properties Units (NPUs) codes identifies laboratory results.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_npu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector of random NPU codes — create_fake_npu","text":"","code":"create_fake_npu(n)"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_npu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector of random NPU codes — create_fake_npu","text":"n number NPUs create.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_npu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector of random NPU codes — create_fake_npu","text":"character vector.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_fake_npu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector of random NPU codes — create_fake_npu","text":"","code":"if (FALSE) { # \\dontrun{ create_fake_npu(4) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_padded_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector of reproducible, random zero-padded integers. — create_padded_integer","title":"Create a vector of reproducible, random zero-padded integers. — create_padded_integer","text":"given number generated integers length, always identical. makes easier joining values represent people, e.g. pnr, cpr, recnum dw_ek_kontakt.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_padded_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector of reproducible, random zero-padded integers. — create_padded_integer","text":"","code":"create_padded_integer(n, length)"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_padded_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector of reproducible, random zero-padded integers. — create_padded_integer","text":"n number integer strings generate. length length padded integer strings.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_padded_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector of reproducible, random zero-padded integers. — create_padded_integer","text":"character vector integers.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_padded_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector of reproducible, random zero-padded integers. — create_padded_integer","text":"","code":"if (FALSE) { # \\dontrun{ create_padded_integer(n = 10, length = 13) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_simulated_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data based on simulation definitions — create_simulated_data","title":"Simulate data based on simulation definitions — create_simulated_data","text":"Simulate data based simulation definitions","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_simulated_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data based on simulation definitions — create_simulated_data","text":"","code":"create_simulated_data(data, n)"},{"path":"https://steno-aarhus.github.io/osdc/reference/create_simulated_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data based on simulation definitions — create_simulated_data","text":"data tibble simulation definitions. n Number observations simulate.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/create_simulated_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data based on simulation definitions — create_simulated_data","text":"tibble simulated data.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/exclude_potential_pcos.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude metformin purchases potentially for the treatment of polycystic ovary syndrome. — exclude_potential_pcos","title":"Exclude metformin purchases potentially for the treatment of polycystic ovary syndrome. — exclude_potential_pcos","text":"Takes output include_gld_purchases() bef (information sex date birth) exclusions. function performs filtering operation outputs structure variables input include_gld_purchases(), except addition logical helper variable no_pcos used later functions. exclusions made, output used exclude_pregnancy().","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/exclude_potential_pcos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exclude metformin purchases potentially for the treatment of polycystic ovary syndrome. — exclude_potential_pcos","text":"","code":"exclude_potential_pcos(gld_purchases, bef)"},{"path":"https://steno-aarhus.github.io/osdc/reference/exclude_potential_pcos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exclude metformin purchases potentially for the treatment of polycystic ovary syndrome. — exclude_potential_pcos","text":"gld_purchases output include_gld_purchases(). bef bef register.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/exclude_potential_pcos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exclude metformin purchases potentially for the treatment of polycystic ovary syndrome. — exclude_potential_pcos","text":"type input data, default tibble::tibble(). also columns include_gld_purchases(), except logical helper variable no_pcos used later functions.","code":""},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/reference/exclude_potential_pcos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exclude metformin purchases potentially for the treatment of polycystic ovary syndrome. — exclude_potential_pcos","text":"","code":"if (FALSE) { # \\dontrun{ register_data <- simulate_registers(c(\"lmdb\", \"bef\"), 100) exclude_potential_pcos(   gld_purchases = include_gld_purchases(register_data$lmdb),   bef = register_data$bef ) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/fct_to_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert all factor variables to character variables. — fct_to_chr","title":"Convert all factor variables to character variables. — fct_to_chr","text":"Convert factor variables character variables.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/fct_to_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert all factor variables to character variables. — fct_to_chr","text":"","code":"fct_to_chr(data)"},{"path":"https://steno-aarhus.github.io/osdc/reference/fct_to_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert all factor variables to character variables. — fct_to_chr","text":"data tibble data frame.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/fct_to_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert all factor variables to character variables. — fct_to_chr","text":"tibble::tibble().","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/get_algorithm_logic.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the criteria algorithmic logic and convert to an R logic condition. — get_algorithm_logic","title":"Get the criteria algorithmic logic and convert to an R logic condition. — get_algorithm_logic","text":"Get criteria algorithmic logic convert R logic condition.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/get_algorithm_logic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the criteria algorithmic logic and convert to an R logic condition. — get_algorithm_logic","text":"","code":"get_algorithm_logic(criteria, algorithm = NULL)"},{"path":"https://steno-aarhus.github.io/osdc/reference/get_algorithm_logic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the criteria algorithmic logic and convert to an R logic condition. — get_algorithm_logic","text":"criteria name inclusion exclusion criteria use. algorithm list algorithmic logic criteria. Default algorithm(). argument used testing .","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/get_algorithm_logic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the criteria algorithmic logic and convert to an R logic condition. — get_algorithm_logic","text":"character string.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/get_algorithm_logic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the criteria algorithmic logic and convert to an R logic condition. — get_algorithm_logic","text":"","code":"if (FALSE) { # \\dontrun{ get_algorithm_logic(\"hba1c\") get_algorithm_logic(\"gld\") } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/get_register_abbrev.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of the registers' abbreviations. — get_register_abbrev","title":"Get a list of the registers' abbreviations. — get_register_abbrev","text":"Get list registers' abbreviations.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/get_register_abbrev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of the registers' abbreviations. — get_register_abbrev","text":"","code":"get_register_abbrev()"},{"path":"https://steno-aarhus.github.io/osdc/reference/get_register_abbrev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a list of the registers' abbreviations. — get_register_abbrev","text":"character string.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/get_register_abbrev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a list of the registers' abbreviations. — get_register_abbrev","text":"","code":"if (FALSE) { # \\dontrun{ get_register_abbrev() } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/get_required_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of required variables from a specific register. — get_required_variables","title":"Get a list of required variables from a specific register. — get_required_variables","text":"Get list required variables specific register.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/get_required_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of required variables from a specific register. — get_required_variables","text":"","code":"get_required_variables(register)"},{"path":"https://steno-aarhus.github.io/osdc/reference/get_required_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a list of required variables from a specific register. — get_required_variables","text":"register abbreviation register name. See list abbreviations get_register_abbrev().","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/get_required_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a list of required variables from a specific register. — get_required_variables","text":"character vector variable names.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/get_required_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a list of required variables from a specific register. — get_required_variables","text":"","code":"if (FALSE) { # \\dontrun{ get_required_variables(\"bef\") } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/include_gld_purchases.html","id":null,"dir":"Reference","previous_headings":"","what":"Include only those who have a purchase of a glucose lowering drug (GLD). — include_gld_purchases","title":"Include only those who have a purchase of a glucose lowering drug (GLD). — include_gld_purchases","text":"include glucose-lowering drugs may used conditions diabetes like GLP-RAs dapagliflozin/empagliflozin drugs. Since diagnosis code data pregnancies (see ) insufficient perform censoring prior 1997, include_gld_purchases() extracts dates 1997 onward default (Medical Birth Register data available use censoring, extraction window can extended).","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/include_gld_purchases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Include only those who have a purchase of a glucose lowering drug (GLD). — include_gld_purchases","text":"","code":"include_gld_purchases(lmdb)"},{"path":"https://steno-aarhus.github.io/osdc/reference/include_gld_purchases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Include only those who have a purchase of a glucose lowering drug (GLD). — include_gld_purchases","text":"lmdb lmdb register.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/include_gld_purchases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Include only those who have a purchase of a glucose lowering drug (GLD). — include_gld_purchases","text":"type input data, default tibble::tibble(), long format dates GLD purchases kept following variables: pnr: Personal identification variable. date: dates purchases GLD. atc: ATC code type drug. contained_doses: amount doses purchased, number defined daily doses (DDD). indication_code: indication code prescription (renamed indo). has_gld_purchases: logical variable use helper indicator later functions.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/include_gld_purchases.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Include only those who have a purchase of a glucose lowering drug (GLD). — include_gld_purchases","text":"events passed chain exclusion functions: exclude_potential_pcos() exclude_pregnancy().","code":""},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/reference/include_gld_purchases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Include only those who have a purchase of a glucose lowering drug (GLD). — include_gld_purchases","text":"","code":"if (FALSE) { # \\dontrun{ simulate_registers(\"lmdb\", 100)[[1]] |> include_gld_purchases() } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/include_hba1c.html","id":null,"dir":"Reference","previous_headings":"","what":"Include only those with HbA1c above the required threshold. — include_hba1c","title":"Include only those with HbA1c above the required threshold. — include_hba1c","text":"lab_forsker register, NPU27300 HbA1c modern units (IFCC) NPU03835 HbA1c old units (DCCT). Multiple elevated results day within individual deduplicated, account test result often reported twice (one IFCC, one DCCT units).","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/include_hba1c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Include only those with HbA1c above the required threshold. — include_hba1c","text":"","code":"include_hba1c(lab_forsker)"},{"path":"https://steno-aarhus.github.io/osdc/reference/include_hba1c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Include only those with HbA1c above the required threshold. — include_hba1c","text":"lab_forsker lab_forsker register.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/include_hba1c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Include only those with HbA1c above the required threshold. — include_hba1c","text":"object input type, default tibble::tibble(), three columns: pnr: Personal identification variable. dates: dates elevated HbA1c test results. has_elevated_hba1c: logical variable indicating HbA1c test included. Used indicator reminder internal functions.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/include_hba1c.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Include only those with HbA1c above the required threshold. — include_hba1c","text":"output passed exclude_pregnancy() function filtering elevated results due potential gestational diabetes (see ).","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/include_hba1c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Include only those with HbA1c above the required threshold. — include_hba1c","text":"","code":"if (FALSE) { # \\dontrun{ simulate_registers(\"lab_forsker\", 100)[[1]] |> include_hba1c() } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/include_podiatrist_services.html","id":null,"dir":"Reference","previous_headings":"","what":"Include diabetes-specific podiatrist services. — include_podiatrist_services","title":"Include diabetes-specific podiatrist services. — include_podiatrist_services","text":"Uses sysi sssy registers input extract dates diabetes-specific podiatrist services. Removes duplicate services date. two earliest dates per individual kept.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/include_podiatrist_services.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Include diabetes-specific podiatrist services. — include_podiatrist_services","text":"","code":"include_podiatrist_services(sysi, sssy)"},{"path":"https://steno-aarhus.github.io/osdc/reference/include_podiatrist_services.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Include diabetes-specific podiatrist services. — include_podiatrist_services","text":"sysi SYSI register. sssy SSSY register.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/include_podiatrist_services.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Include diabetes-specific podiatrist services. — include_podiatrist_services","text":"type input data, default tibble::tibble(), two columns two rows individual: pnr: Identifier variable date: dates first second diabetes-specific podiatrist record has_podiatrist_services: logical variable acts helper indicator use later functions.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/include_podiatrist_services.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Include diabetes-specific podiatrist services. — include_podiatrist_services","text":"output passed join_inclusions() function final step inclusion process.","code":""},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/reference/include_podiatrist_services.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Include diabetes-specific podiatrist services. — include_podiatrist_services","text":"","code":"if (FALSE) { # \\dontrun{ register_data <- simulate_registers(c(\"sysi\", \"sssy\"), 100) include_podiatrist_services(register_data$sysi, register_data$sssy) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_analysiscode.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert additional analysis codes for HbA1c — insert_analysiscode","title":"Insert additional analysis codes for HbA1c — insert_analysiscode","text":"Insert additional analysis codes HbA1c","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_analysiscode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert additional analysis codes for HbA1c — insert_analysiscode","text":"","code":"insert_analysiscode(data, proportion = 0.3)"},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_analysiscode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert additional analysis codes for HbA1c — insert_analysiscode","text":"data tibble. proportion Proportion re-sample. Defaults 0.3.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_analysiscode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert additional analysis codes for HbA1c — insert_analysiscode","text":"tibble. column named analysiscode, proportion values replaced codes HbA1c.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_false_metformin.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert cases where metformin is used for other purposes than diabetes — insert_false_metformin","title":"Insert cases where metformin is used for other purposes than diabetes — insert_false_metformin","text":"function uses variable indo code underlying condition treated prescribed medication.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_false_metformin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert cases where metformin is used for other purposes than diabetes — insert_false_metformin","text":"","code":"insert_false_metformin(data, proportion = 0.05)"},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_false_metformin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert cases where metformin is used for other purposes than diabetes — insert_false_metformin","text":"data tibble. proportion Proportion re-sample. Defaults 0.05.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_false_metformin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert cases where metformin is used for other purposes than diabetes — insert_false_metformin","text":"tibble. column names tibble either atc, proportion observations re-sampled metformin.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_specific_atc.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert specific ATC codes based on a proportion — insert_specific_atc","title":"Insert specific ATC codes based on a proportion — insert_specific_atc","text":"Insert specific ATC codes based proportion","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_specific_atc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert specific ATC codes based on a proportion — insert_specific_atc","text":"","code":"insert_specific_atc(data, proportion = 0.3)"},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_specific_atc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert specific ATC codes based on a proportion — insert_specific_atc","text":"data tibble. proportion Proportion resampled. Defaults 0.3.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insert_specific_atc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert specific ATC codes based on a proportion — insert_specific_atc","text":"tibble proportion resampled ATC codes columns named 'atc'","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insertion_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate logic based on a probability — insertion_rate","title":"Generate logic based on a probability — insertion_rate","text":"Generate logic based probability","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insertion_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate logic based on a probability — insertion_rate","text":"","code":"insertion_rate(proportion)"},{"path":"https://steno-aarhus.github.io/osdc/reference/insertion_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate logic based on a probability — insertion_rate","text":"proportion double 0 1.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insertion_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate logic based on a probability — insertion_rate","text":"logic vector. TRUE random number less proportion, otherwise FALSE.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/insertion_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate logic based on a probability — insertion_rate","text":"","code":"if (FALSE) { # \\dontrun{ insertion_rate(0.3) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/join_lpr3.html","id":null,"dir":"Reference","previous_headings":"","what":"Join together the LPR3 (diagnoser and kontakter) registers. — join_lpr3","title":"Join together the LPR3 (diagnoser and kontakter) registers. — join_lpr3","text":"prepare LPR3 data inclusion process, function also renames cpr variable pnr match registers.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/join_lpr3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join together the LPR3 (diagnoser and kontakter) registers. — join_lpr3","text":"","code":"join_lpr3(kontakter, diagnoser)"},{"path":"https://steno-aarhus.github.io/osdc/reference/join_lpr3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join together the LPR3 (diagnoser and kontakter) registers. — join_lpr3","text":"kontakter contacts register. diagnoser diagnosis register.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/join_lpr3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join together the LPR3 (diagnoser and kontakter) registers. — join_lpr3","text":"class input, defaults tibble::tibble().","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/join_lpr3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join together the LPR3 (diagnoser and kontakter) registers. — join_lpr3","text":"","code":"if (FALSE) { # \\dontrun{ kontakter <- simulate_registers(\"kontakter\", 100)[[1]] diagnoser <- simulate_registers(\"diagnoser\", 100)[[1]] join_lpr3(   kontakter = kontakter,   diagnoser = diagnoser ) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/osdc-package.html","id":null,"dir":"Reference","previous_headings":"","what":"osdc: Open Source Diabetes Classifier (OSDC) for Danish Registers — osdc-package","title":"osdc: Open Source Diabetes Classifier (OSDC) for Danish Registers — osdc-package","text":"classifier first identifies population individuals type diabetes mellitus splits population T1D T2D identifying individuals T1D classifying remainder diabetes population T2D.","code":""},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/reference/osdc-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"osdc: Open Source Diabetes Classifier (OSDC) for Danish Registers — osdc-package","text":"Maintainer: Luke William Johnston lwjohnst@gmail.com (ORCID) Authors: Signe Kirk Brødbæk signekb@clin.au.dk Anders Aasted Isaksen andaas@rm.dk contributors: Steno Diabetes Center Aarhus [copyright holder] Aarhus University [copyright holder]","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/pad_integers.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero pad an integer to a specific length — pad_integers","title":"Zero pad an integer to a specific length — pad_integers","text":"Zero pad integer specific length","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/pad_integers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero pad an integer to a specific length — pad_integers","text":"","code":"pad_integers(x, width)"},{"path":"https://steno-aarhus.github.io/osdc/reference/pad_integers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero pad an integer to a specific length — pad_integers","text":"x integer vector integers. width integer describing final width zero-padded integer.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/pad_integers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero pad an integer to a specific length — pad_integers","text":"character vector integers.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/pad_integers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero pad an integer to a specific length — pad_integers","text":"","code":"if (FALSE) { # \\dontrun{ pad_integers(x = 1, width = 5) pad_integers(x = c(1, 2, 3), width = 10) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/prepare_lpr2.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare and join the two LPR2 registers to extract diabetes and pregnancy diagnoses. — prepare_lpr2","title":"Prepare and join the two LPR2 registers to extract diabetes and pregnancy diagnoses. — prepare_lpr2","text":"output used inputs include_diabetes_diagnoses() get_pregnancy_dates() (see exclusion events).","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/prepare_lpr2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare and join the two LPR2 registers to extract diabetes and pregnancy diagnoses. — prepare_lpr2","text":"","code":"prepare_lpr2(lpr_adm, lpr_diag)"},{"path":"https://steno-aarhus.github.io/osdc/reference/prepare_lpr2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare and join the two LPR2 registers to extract diabetes and pregnancy diagnoses. — prepare_lpr2","text":"lpr_adm LPR2 register containing hospital admissions. lpr_diag LPR2 register containing diabetes diagnoses.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/prepare_lpr2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare and join the two LPR2 registers to extract diabetes and pregnancy diagnoses. — prepare_lpr2","text":"type input data, default tibble::tibble(), following columns: pnr: personal identification variable. date: date recorded diagnosis (renamed d_inddto). is_primary_dx: Whether diagnosis primary diagnosis. is_diabetes_code: Whether diagnosis type diabetes. is_t1d_code: Whether diagnosis T1D-specific. is_t2d_code: Whether diagnosis T2D-specific. is_pregnancy_code: Whether person event related pregnancy like giving birth miscarriage given date. is_endocrinology_dept: Whether diagnosis made endocrinology medical department. is_medical_dept: Whether diagnosis made non-endocrinology medical department.","code":""},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/reference/prepare_lpr2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare and join the two LPR2 registers to extract diabetes and pregnancy diagnoses. — prepare_lpr2","text":"","code":"if (FALSE) { # \\dontrun{ register_data <- simulate_registers(c(\"lpr_diag\", \"lpr_adm\"), 100000) lpr2 <- prepare_lpr2(   lpr_diag = register_data$lpr_diag,   lpr_adm = register_data$lpr_adm ) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/registers.html","id":null,"dir":"Reference","previous_headings":"","what":"Register variables (with descriptions) required for the osdc algorithm. — registers","title":"Register variables (with descriptions) required for the osdc algorithm. — registers","text":"Register variables (descriptions) required osdc algorithm.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/registers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register variables (with descriptions) required for the osdc algorithm. — registers","text":"","code":"registers()"},{"path":"https://steno-aarhus.github.io/osdc/reference/registers.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Register variables (with descriptions) required for the osdc algorithm. — registers","text":"Many details within registers() metadata come full official list registers Statistics Denmark (DST): https://www.dst.dk/extranet/forskningvariabellister/Oversigt%20over%20registre.html","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/registers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register variables (with descriptions) required for the osdc algorithm. — registers","text":"Outputs list registers variables required osdc. list item contains official Danish name register, start year, end year, variables descriptions. variables item data frame 4 columns: name official name variable found register. danish_description official Danish description variable. english_description translated English description variable. data_type data type, e.g. \"character\" variable. multiple options (e.g. \"Date\" \"character\").","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/scrape_icd8_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrape SDS's website for their ICD-8 codes and saves to a file. — scrape_icd8_codes","title":"Scrape SDS's website for their ICD-8 codes and saves to a file. — scrape_icd8_codes","text":"Scrape SDS's website ICD-8 codes saves file.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/scrape_icd8_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrape SDS's website for their ICD-8 codes and saves to a file. — scrape_icd8_codes","text":"","code":"scrape_icd8_codes()"},{"path":"https://steno-aarhus.github.io/osdc/reference/scrape_icd8_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrape SDS's website for their ICD-8 codes and saves to a file. — scrape_icd8_codes","text":"Saves CSV file ICD-8 codes. Outputs path saved file.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/scrape_icd8_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scrape SDS's website for their ICD-8 codes and saves to a file. — scrape_icd8_codes","text":"","code":"if (FALSE) { # \\dontrun{ scrape_icd8_codes() } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/simulate_registers.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a fake data frame of one or more Danish registers — simulate_registers","title":"Simulate a fake data frame of one or more Danish registers — simulate_registers","text":"Simulate fake data frame one Danish registers","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/simulate_registers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a fake data frame of one or more Danish registers — simulate_registers","text":"","code":"simulate_registers(registers, n = 1000)"},{"path":"https://steno-aarhus.github.io/osdc/reference/simulate_registers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a fake data frame of one or more Danish registers — simulate_registers","text":"registers name register want simulate. n number rows simulate resulting register.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/simulate_registers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a fake data frame of one or more Danish registers — simulate_registers","text":"list simulated register data.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/simulate_registers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a fake data frame of one or more Danish registers — simulate_registers","text":"","code":"simulate_registers(c(\"bef\", \"sysi\")) #> $bef #> # A tibble: 1,000 × 3 #>     koen pnr          foed_dato #>    <dbl> <chr>        <chr>     #>  1     1 108684730664 19320112  #>  2     2 982144017357 20070716  #>  3     2 672580814975 19800805  #>  4     1 439008110445 20090628  #>  5     1 489714666740 20170225  #>  6     1 155331797020 19730330  #>  7     1 777951655096 19341022  #>  8     1 167007504860 20010318  #>  9     2 132473802596 19530901  #> 10     2 876820784981 19310817  #> # ℹ 990 more rows #>  #> $sysi #> # A tibble: 1,000 × 4 #>    pnr          barnmak speciale honuge #>    <chr>          <int> <chr>    <chr>  #>  1 108684730664       0 10022    9329   #>  2 982144017357       0 88475    0442   #>  3 672580814975       0 83575    9549   #>  4 439008110445       1 86409    9603   #>  5 489714666740       0 42818    9215   #>  6 155331797020       0 67148    9924   #>  7 777951655096       0 62545    9727   #>  8 167007504860       1 20866    9632   #>  9 132473802596       0 27002    0213   #> 10 876820784981       0 53825    9419   #> # ℹ 990 more rows #>  simulate_registers(\"bef\") #> $bef #> # A tibble: 1,000 × 3 #>     koen pnr          foed_dato #>    <dbl> <chr>        <chr>     #>  1     1 108684730664 19320112  #>  2     1 982144017357 20070716  #>  3     1 672580814975 19800805  #>  4     1 439008110445 20090628  #>  5     2 489714666740 20170225  #>  6     1 155331797020 19730330  #>  7     2 777951655096 19341022  #>  8     1 167007504860 20010318  #>  9     1 132473802596 19530901  #> 10     1 876820784981 19310817  #> # ℹ 990 more rows #>  simulate_registers(\"diagnoser\") #> $diagnoser #> # A tibble: 1,000 × 4 #>    dw_ek_kontakt      diagnosekode diagnosetype senere_afkraeftet #>    <chr>              <chr>        <chr>        <chr>             #>  1 920166254345774467 DX7621       B            Nej               #>  2 075972782062569784 DZ832        B            Ja                #>  3 176536283003603061 DQ796        A            Nej               #>  4 581624294965046227 DN764E       A            Nej               #>  5 814210282344580857 DB260        B            Nej               #>  6 393885735973313484 DM13         B            Nej               #>  7 836179506546686729 DZ52         B            Ja                #>  8 814175436846538799 DQ666D       B            Nej               #>  9 508133593881487375 DK660C       A            Nej               #> 10 325077063891132755 DT559B       B            Nej               #> # ℹ 990 more rows #>"},{"path":"https://steno-aarhus.github.io/osdc/reference/to_yyww.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform date(s) to the format yyww — to_yyww","title":"Transform date(s) to the format yyww — to_yyww","text":"Transform date(s) format yyww","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/to_yyww.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform date(s) to the format yyww — to_yyww","text":"","code":"to_yyww(x)"},{"path":"https://steno-aarhus.github.io/osdc/reference/to_yyww.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform date(s) to the format yyww — to_yyww","text":"x date vector dates.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/to_yyww.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform date(s) to the format yyww — to_yyww","text":"vector dates format yyww.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/to_yyww.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform date(s) to the format yyww — to_yyww","text":"","code":"if (FALSE) { # \\dontrun{ to_yyww(\"2020-12-01\") to_yyww(\"2001-01-01\") to_yyww(c(\"2020-01-12\", \"1995-04-19\")) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/to_yyyymmdd.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform date(s) to the format yyyymmdd — to_yyyymmdd","title":"Transform date(s) to the format yyyymmdd — to_yyyymmdd","text":"Transform date(s) format yyyymmdd","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/to_yyyymmdd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform date(s) to the format yyyymmdd — to_yyyymmdd","text":"","code":"to_yyyymmdd(x)"},{"path":"https://steno-aarhus.github.io/osdc/reference/to_yyyymmdd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform date(s) to the format yyyymmdd — to_yyyymmdd","text":"x date vector dates.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/to_yyyymmdd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform date(s) to the format yyyymmdd — to_yyyymmdd","text":"vector dates format yyyymmdd.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/to_yyyymmdd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform date(s) to the format yyyymmdd — to_yyyymmdd","text":"","code":"if (FALSE) { # \\dontrun{ to_yyyymmdd(\"2020-12-01\") to_yyyymmdd(c(\"2020-01-12\", \"1995-04-19\")) } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/verify_required_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that the dataset has the required variables for the algorithm. — verify_required_variables","title":"Verify that the dataset has the required variables for the algorithm. — verify_required_variables","text":"Use function inside another function within condition provide informative error message within function used. done make error message informative location error actually occurs, rather within function.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/verify_required_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that the dataset has the required variables for the algorithm. — verify_required_variables","text":"","code":"verify_required_variables(data, register, call = rlang::caller_env())"},{"path":"https://steno-aarhus.github.io/osdc/reference/verify_required_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that the dataset has the required variables for the algorithm. — verify_required_variables","text":"data dataset check. register abbreviation register name. See list abbreviations get_register_abbrev(). call environment function called, error traceback gives meaningful location.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/verify_required_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify that the dataset has the required variables for the algorithm. — verify_required_variables","text":"Either TRUE verification passes, error.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/verify_required_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verify that the dataset has the required variables for the algorithm. — verify_required_variables","text":"","code":"if (FALSE) { # \\dontrun{ # TODO: Replace with simulated data. verify_required_variables(simulate_registers(\"bef\")[[1]], \"bef\") verify_required_variables(simulate_registers(\"lpr_adm\")[[1]], \"lpr_adm\") } # }"},{"path":"https://steno-aarhus.github.io/osdc/reference/yyww_to_yyyymmdd.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert date format YYWW to YYYY-MM-DD — yyww_to_yyyymmdd","title":"Convert date format YYWW to YYYY-MM-DD — yyww_to_yyyymmdd","text":"Since exact date given input, function set date Monday week. precaution, leading zero added removed. can e.g., happen input \"0107\" converted numeric 107. need export function can found using Arrow process data.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/yyww_to_yyyymmdd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert date format YYWW to YYYY-MM-DD — yyww_to_yyyymmdd","text":"","code":"yyww_to_yyyymmdd(yyww)"},{"path":"https://steno-aarhus.github.io/osdc/reference/yyww_to_yyyymmdd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert date format YYWW to YYYY-MM-DD — yyww_to_yyyymmdd","text":"yyww Character(s) format YYWW.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/yyww_to_yyyymmdd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert date format YYWW to YYYY-MM-DD — yyww_to_yyyymmdd","text":"Date(s) format YYYY-MM-DD.","code":""},{"path":"https://steno-aarhus.github.io/osdc/reference/yyww_to_yyyymmdd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert date format YYWW to YYYY-MM-DD — yyww_to_yyyymmdd","text":"","code":"if (FALSE) { # \\dontrun{ yyww_to_yyyymmdd(\"0101\") yyww_to_yyyymmdd(\"2402\") yyww_to_yyyymmdd(\"2453\") yyww_to_yyyymmdd(c(\"0102\", \"0304\")) yyww_to_yyyymmdd(c(\"0100\", \"0353\")) yyww_to_yyyymmdd(c(\"0953\", \"0701\")) yyww_to_yyyymmdd(953) } # }"},{"path":[]},{"path":"https://steno-aarhus.github.io/osdc/news/index.html","id":"general-0-0-1-9000","dir":"Changelog","previous_headings":"","what":"General","title":"osdc 0.0.1.9000 (development version)","text":"Started package setup infrastructure.","code":""},{"path":"https://steno-aarhus.github.io/osdc/news/index.html","id":"documentation-0-0-1-9000","dir":"Changelog","previous_headings":"","what":"Documentation","title":"osdc 0.0.1.9000 (development version)","text":"Added drafts vignettes Getting Started vignette(\"osdc\") (#53) Added multiple sections design package algorithm vignette(\"design\") (#42, #43, #56, #57, #51) Added draft rationale package algorithm vignette(\"rationale\") (#63).","code":""},{"path":"https://steno-aarhus.github.io/osdc/news/index.html","id":"data-0-0-1-9000","dir":"Changelog","previous_headings":"","what":"Data","title":"osdc 0.0.1.9000 (development version)","text":"Added dataset contains list variables registers need algorithm work variable_description (#37, #48).","code":""},{"path":"https://steno-aarhus.github.io/osdc/news/index.html","id":"internal-0-0-1-9000","dir":"Changelog","previous_headings":"","what":"Internal","title":"osdc 0.0.1.9000 (development version)","text":"Added function internally verify input register database contains necessary variables algorithm work, using verify_required_variables() (#45). Added function convert columns lower case register database, using column_names_to_lower() (#60).","code":""}]
